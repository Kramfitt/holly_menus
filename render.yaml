services:
  # Web App
  - type: web
    name: menu-system
    env: python
    buildCommand: |
      # Install system packages
      sudo apt-get update
      sudo apt-get install -y tesseract-ocr tesseract-ocr-eng libtesseract-dev libleptonica-dev poppler-utils
      
      # Create application bin directory
      mkdir -p bin
      
      # Find and copy Tesseract and its dependencies
      TESSERACT_BIN=$(which tesseract)
      if [ -z "$TESSERACT_BIN" ]; then
        echo "Tesseract not found after installation"
        exit 1
      fi
      
      # Copy Tesseract binary
      cp $TESSERACT_BIN bin/
      
      # Copy required shared libraries
      ldd $TESSERACT_BIN | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' bin/
      
      # Copy language data
      mkdir -p share/tessdata
      cp -r /usr/share/tesseract-ocr/*/tessdata/* share/tessdata/
      
      # Set up environment for build and runtime
      export TESSDATA_PREFIX="$PWD/share/tessdata"
      export TESSERACT_PATH="$PWD/bin/tesseract"
      export LD_LIBRARY_PATH="$PWD/bin:$LD_LIBRARY_PATH"
      
      # Make Tesseract executable
      chmod +x bin/tesseract
      
      # Verify Tesseract works
      echo "Testing Tesseract installation..."
      bin/tesseract --version
      bin/tesseract --list-langs
      
      # Install Python dependencies
      pip install -r requirements.txt
      
      # Create test script
      cat > test_tesseract.py << 'EOL'
import os
import pytesseract
from PIL import Image, ImageDraw

def test_tesseract():
    print(f"TESSDATA_PREFIX: {os.getenv('TESSDATA_PREFIX')}")
    print(f"TESSERACT_PATH: {os.getenv('TESSERACT_PATH')}")
    print(f"LD_LIBRARY_PATH: {os.getenv('LD_LIBRARY_PATH')}")
    
    # Create test image
    img = Image.new('RGB', (200, 50), color='white')
    draw = ImageDraw.Draw(img)
    draw.text((10, 10), "TEST OCR 123", fill='black')
    img.save('test.png')
    
    # Configure pytesseract
    pytesseract.pytesseract.tesseract_cmd = os.getenv('TESSERACT_PATH')
    
    # Try OCR
    result = pytesseract.image_to_string(Image.open('test.png'))
    print(f"OCR Result: {result.strip()}")
    os.remove('test.png')
    return 'TEST' in result.upper()

if __name__ == '__main__':
    if not test_tesseract():
        print("Tesseract test failed")
        exit(1)
    print("Tesseract test passed")
EOL
      
      # Test Tesseract with Python
      python test_tesseract.py
      
    startCommand: |
      # Set up environment variables
      export TESSDATA_PREFIX="$PWD/share/tessdata"
      export TESSERACT_PATH="$PWD/bin/tesseract"
      export LD_LIBRARY_PATH="$PWD/bin:$LD_LIBRARY_PATH"
      
      # Start the application
      gunicorn app:app
      
    envVars:
      - key: RENDER
        value: "true"
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: TESSDATA_PREFIX
        value: /opt/render/project/src/share/tessdata
      - key: TESSERACT_PATH
        value: /opt/render/project/src/bin/tesseract
      - key: LD_LIBRARY_PATH
        value: /opt/render/project/src/bin
      - key: SUPABASE_URL
        sync: false
      - key: SUPABASE_KEY
        sync: false
      - key: SMTP_SERVER
        sync: false
      - key: SMTP_PORT
        sync: false
      - key: SMTP_USERNAME
        sync: false
      - key: SMTP_PASSWORD
        sync: false
      - key: ADMIN_EMAIL
        sync: false

  # Worker Service
  - type: worker
    name: menu-worker
    env: python
    buildCommand: |
      # Install system packages
      sudo apt-get update
      sudo apt-get install -y tesseract-ocr tesseract-ocr-eng libtesseract-dev libleptonica-dev poppler-utils
      
      # Create application bin directory
      mkdir -p bin
      
      # Find and copy Tesseract and its dependencies
      TESSERACT_BIN=$(which tesseract)
      if [ -z "$TESSERACT_BIN" ]; then
        echo "Tesseract not found after installation"
        exit 1
      fi
      
      # Copy Tesseract binary
      cp $TESSERACT_BIN bin/
      
      # Copy required shared libraries
      ldd $TESSERACT_BIN | grep "=> /" | awk '{print $3}' | xargs -I '{}' cp -v '{}' bin/
      
      # Copy language data
      mkdir -p share/tessdata
      cp -r /usr/share/tesseract-ocr/*/tessdata/* share/tessdata/
      
      # Set up environment for build and runtime
      export TESSDATA_PREFIX="$PWD/share/tessdata"
      export TESSERACT_PATH="$PWD/bin/tesseract"
      export LD_LIBRARY_PATH="$PWD/bin:$LD_LIBRARY_PATH"
      
      # Make Tesseract executable
      chmod +x bin/tesseract
      
      # Verify Tesseract works
      echo "Testing Tesseract installation..."
      bin/tesseract --version
      bin/tesseract --list-langs
      
      # Install Python dependencies
      pip install -r requirements.txt
      
      # Test Tesseract with Python
      python test_tesseract.py
      
    startCommand: |
      # Set up environment variables
      export TESSDATA_PREFIX="$PWD/share/tessdata"
      export TESSERACT_PATH="$PWD/bin/tesseract"
      export LD_LIBRARY_PATH="$PWD/bin:$LD_LIBRARY_PATH"
      
      # Start the worker
      python worker.py
      
    envVars:
      - key: RENDER
        value: "true"
      - key: PYTHON_VERSION
        value: 3.11.0
      - key: TESSDATA_PREFIX
        value: /opt/render/project/src/share/tessdata
      - key: TESSERACT_PATH
        value: /opt/render/project/src/bin/tesseract
      - key: LD_LIBRARY_PATH
        value: /opt/render/project/src/bin
      - key: SUPABASE_URL
        sync: false
      - key: SUPABASE_KEY
        sync: false
      - key: SMTP_SERVER
        sync: false
      - key: SMTP_PORT
        sync: false
      - key: SMTP_USERNAME
        sync: false
      - key: SMTP_PASSWORD
        sync: false 